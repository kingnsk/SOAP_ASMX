//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExecutionClient.ExecutionServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticsService", Namespace="http://schemas.datacontract.org/2004/07/ExecutionService")]
    [System.SerializableAttribute()]
    public partial class StatisticsService : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AllCountsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SuccessCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AllCounts {
            get {
                return this.AllCountsField;
            }
            set {
                if ((this.AllCountsField.Equals(value) != true)) {
                    this.AllCountsField = value;
                    this.RaisePropertyChanged("AllCounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCount {
            get {
                return this.ErrorCountField;
            }
            set {
                if ((this.ErrorCountField.Equals(value) != true)) {
                    this.ErrorCountField = value;
                    this.RaisePropertyChanged("ErrorCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SuccessCount {
            get {
                return this.SuccessCountField;
            }
            set {
                if ((this.SuccessCountField.Equals(value) != true)) {
                    this.SuccessCountField = value;
                    this.RaisePropertyChanged("SuccessCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="ExecutionServiceReference.IExecutionService", CallbackContract=typeof(ExecutionClient.ExecutionServiceReference.IExecutionServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IExecutionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IExecutionService/RunScript", ReplyAction="http://Microsoft.ServiceModel.Samples/IExecutionService/RunScriptResponse")]
        void RunScript();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IExecutionService/RunScript", ReplyAction="http://Microsoft.ServiceModel.Samples/IExecutionService/RunScriptResponse")]
        System.Threading.Tasks.Task RunScriptAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IExecutionService/UpdateAndCompileScript", ReplyAction="http://Microsoft.ServiceModel.Samples/IExecutionService/UpdateAndCompileScriptRes" +
            "ponse")]
        void UpdateAndCompileScript(string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IExecutionService/UpdateAndCompileScript", ReplyAction="http://Microsoft.ServiceModel.Samples/IExecutionService/UpdateAndCompileScriptRes" +
            "ponse")]
        System.Threading.Tasks.Task UpdateAndCompileScriptAsync(string fileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExecutionServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IExecutionService/UpdateStatistics", ReplyAction="http://Microsoft.ServiceModel.Samples/IExecutionService/UpdateStatisticsResponse")]
        void UpdateStatistics(ExecutionClient.ExecutionServiceReference.StatisticsService statistics);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExecutionServiceChannel : ExecutionClient.ExecutionServiceReference.IExecutionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecutionServiceClient : System.ServiceModel.DuplexClientBase<ExecutionClient.ExecutionServiceReference.IExecutionService>, ExecutionClient.ExecutionServiceReference.IExecutionService {
        
        public ExecutionServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ExecutionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ExecutionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ExecutionServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ExecutionServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RunScript() {
            base.Channel.RunScript();
        }
        
        public System.Threading.Tasks.Task RunScriptAsync() {
            return base.Channel.RunScriptAsync();
        }
        
        public void UpdateAndCompileScript(string fileName) {
            base.Channel.UpdateAndCompileScript(fileName);
        }
        
        public System.Threading.Tasks.Task UpdateAndCompileScriptAsync(string fileName) {
            return base.Channel.UpdateAndCompileScriptAsync(fileName);
        }
    }
}
